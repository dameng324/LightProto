using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

namespace Dameng.Protobuf.Extension.Generator;

[Generator]
public class PbMessageParserGenerator : ISourceGenerator
{
    public void Initialize(GeneratorInitializationContext context) { }

    public void Execute(GeneratorExecutionContext context)
    {
        var pbMessageInterface = context.Compilation.GetTypeByMetadataName(
            "Google.Protobuf.IMessage`1"
        );
        if (pbMessageInterface is null)
        {
            context.ReportDiagnostic(
                Diagnostic.Create(
                    new DiagnosticDescriptor(
                        "DPE001",
                        "Missing Google.Protobuf.IMessage<T> interface",
                        "The Google.Protobuf.IMessage<T> interface is not available. Ensure you have the Google.Protobuf package installed.",
                        "Usage",
                        DiagnosticSeverity.Error,
                        true
                    ),
                    Location.None
                )
            );

            return;
        }

        var sourceBuilder = new StringBuilder();
        sourceBuilder.AppendLine(
            """
            // <auto-generated>
            // </auto-generated>
            using Google.Protobuf;
            using Dameng.Protobuf;
            """
        );
        foreach (var syntaxTree in context.Compilation.SyntaxTrees)
        {
            var semanticModel = context.Compilation.GetSemanticModel(syntaxTree);
            foreach (var typeDeclaration in syntaxTree.GetRoot().DescendantNodesAndSelf())
            {
                var targetType =
                    semanticModel.GetDeclaredSymbol(typeDeclaration) as INamedTypeSymbol;

                if (targetType is null)
                {
                    continue;
                }

                var pbMessageDefine = targetType.AllInterfaces.FirstOrDefault(i =>
                    SymbolEqualityComparer.Default.Equals(i.OriginalDefinition, pbMessageInterface)
                );
                if (
                    pbMessageDefine is not null
                    && pbMessageDefine.TypeArguments.Length == 1
                    && SymbolEqualityComparer.Default.Equals(
                        pbMessageDefine.TypeArguments[0],
                        targetType
                    )
                )
                {
                    sourceBuilder.AppendLine(
                        $$"""
                        namespace {{targetType.ContainingNamespace.ToDisplayString()}}
                        {
                            partial class {{targetType.Name}} : IPbMessageParser<{{targetType.Name}}> {}
                        }
                        """
                    );
                }
            }
        }

        context.AddSource(
            "Dameng.Protobuf.g.cs",
            SourceText.From(sourceBuilder.ToString(), Encoding.UTF8)
        );
    }
}
